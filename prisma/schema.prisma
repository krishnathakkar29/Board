generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String        @id @default(cuid())
  name           String?
  email          String        @unique
  createdAt      DateTime      @default(now())
  emailVerified  DateTime?
  image          String?
  updatedAt      DateTime      @updatedAt
  organisationId String?
  password       String
  accounts       Account[]
  Favourite      Favourite[]
  sessions       Session[]
  Organisation   Organisation? @relation(fields: [organisationId], references: [id], onDelete: SetNull)
}

model Organisation {
  id        String   @id @default(cuid())
  name      String   @unique
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  board     Board[]
  user      User[]
}

model Board {
  id             String        @id @default(cuid())
  title          String
  ownerUserId    String
  imageUrl       String
  orgId          String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  organisationId String?
  Organisation   Organisation? @relation(fields: [organisationId], references: [id], onDelete: Cascade)
  Favourite      Favourite[]
}

model Favourite {
  id        String   @id @default(cuid())
  userId    String
  boardId   String
  createdAt DateTime @default(now())
  board     Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, boardId])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}
